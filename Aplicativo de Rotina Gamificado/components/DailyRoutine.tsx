import { Task, Skill, Period } from '../types';
import { TaskItem } from './TaskItem';

interface DailyRoutineProps {
  tasks: Task[];
  skills: Skill[];
  onCompleteTask: (taskId: string) => void;
  onDeleteTask: (taskId: string) => void;
}

const periodLabels = {
  morning: 'Manhã',
  afternoon: 'Tarde',
  night: 'Noite',
};

const periodIcons = {
  morning: '🌅',
  afternoon: '☀️',
  night: '🌙',
};

export function DailyRoutine({ tasks, skills, onCompleteTask, onDeleteTask }: DailyRoutineProps) {
  const today = new Date();
  const formattedDate = today.toLocaleDateString('pt-BR', {
    weekday: 'long',
    month: 'long',
    day: 'numeric',
  });
  
  // Formato "Hoje, 15 de agosto" conforme especificação
  const dateTitle = `Hoje, ${today.getDate()} de ${today.toLocaleDateString('pt-BR', { month: 'long' })}`;

  const tasksByPeriod = tasks.reduce((acc, task) => {
    if (!acc[task.period]) {
      acc[task.period] = [];
    }
    acc[task.period].push(task);
    return acc;
  }, {} as Record<Period, Task[]>);

  const periods: Period[] = ['morning', 'afternoon', 'night'];

  const completedTasks = tasks.filter(task => task.completed).length;
  const totalTasks = tasks.length;
  const completionPercentage = totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0;
  
  // Contar tarefas geradas automaticamente
  const autoGeneratedTasks = tasks.filter(task => task.originalTaskId).length;

  return (
    <div className="space-y-6">
      {/* Date and Progress - Formato melhorado conforme especificação */}
      <div className="text-center space-y-3">
        <div>
          <h2 className="text-xl font-semibold text-white mb-1">{dateTitle}</h2>
          <p className="text-sm text-gray-400 capitalize">{formattedDate}</p>
        </div>
        
        <div className="bg-gray-800/50 rounded-lg p-4 border border-gray-700/30">
          <div className="flex justify-between items-center mb-3">
            <span className="text-sm text-gray-300">Progresso do Dia</span>
            <div className="flex items-center gap-2">
              <span className="text-lg font-bold text-green-400">{completionPercentage}%</span>
              {completionPercentage === 100 && totalTasks > 0 && (
                <span className="text-lg">🎉</span>
              )}
            </div>
          </div>
          <div className="w-full bg-gray-700 rounded-full h-3 mb-2">
            <div 
              className="bg-gradient-to-r from-green-500 to-blue-500 h-3 rounded-full transition-all duration-500 relative overflow-hidden"
              style={{ width: `${completionPercentage}%` }}
            >
              {/* Animação de brilho quando progresso é alto */}
              {completionPercentage > 50 && (
                <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent transform -skew-x-12 animate-pulse" />
              )}
            </div>
          </div>
          <div className="flex justify-between items-center text-xs">
            <span className="text-gray-400">
              {completedTasks} de {totalTasks} tarefas concluídas
            </span>
            {autoGeneratedTasks > 0 && (
              <span className="text-purple-400 bg-purple-900/20 px-2 py-1 rounded">
                {autoGeneratedTasks} automáticas
              </span>
            )}
          </div>
        </div>
      </div>

      {/* Tasks by Period */}
      {periods.map(period => {
        const periodTasks = tasksByPeriod[period] || [];
        const periodCompleted = periodTasks.filter(t => t.completed).length;
        const periodTotal = periodTasks.length;
        const periodProgress = periodTotal > 0 ? Math.round((periodCompleted / periodTotal) * 100) : 0;
        
        return (
          <div key={period} className="space-y-3">
            <div className="flex items-center gap-3 bg-gray-800/30 rounded-lg p-3 border border-gray-700/30">
              <span className="text-2xl">{periodIcons[period]}</span>
              <div className="flex-1">
                <h3 className="text-lg font-medium text-white">{periodLabels[period]}</h3>
                {periodTotal > 0 && (
                  <div className="flex items-center gap-2 mt-1">
                    <div className="flex-1 h-1.5 bg-gray-700 rounded-full">
                      <div 
                        className="h-1.5 rounded-full transition-all duration-300"
                        style={{ 
                          width: `${periodProgress}%`,
                          backgroundColor: periodProgress === 100 ? '#10b981' : '#6366f1'
                        }}
                      />
                    </div>
                    <span className="text-xs text-gray-400 min-w-fit">
                      {periodCompleted}/{periodTotal}
                    </span>
                  </div>
                )}
              </div>
              {periodProgress === 100 && periodTotal > 0 && (
                <span className="text-green-400">✓</span>
              )}
            </div>
            
            <div className="space-y-2 ml-2">
              {periodTasks.length === 0 ? (
                <div className="text-center py-6 text-gray-400 bg-gray-800/20 rounded-lg border border-gray-700/20">
                  <div className="text-3xl mb-2">📋</div>
                  <p className="text-sm">Nenhuma tarefa para este período</p>
                </div>
              ) : (
                periodTasks
                  .sort((a, b) => {
                    // Primeiro por horário, depois por nome
                    if (a.time && b.time) {
                      return a.time.localeCompare(b.time);
                    }
                    if (a.time && !b.time) return -1;
                    if (!a.time && b.time) return 1;
                    return a.name.localeCompare(b.name);
                  })
                  .map(task => (
                    <TaskItem
                      key={task.id}
                      task={task}
                      skill={skills.find(s => s.id === task.skill)}
                      onComplete={() => onCompleteTask(task.id)}
                      onDelete={() => onDeleteTask(task.id)}
                    />
                  ))
              )}
            </div>
          </div>
        );
      })}

      {totalTasks === 0 && (
        <div className="text-center py-12 text-gray-400">
          <div className="text-6xl mb-4">🎮</div>
          <h3 className="text-xl mb-2 text-white">Comece sua jornada!</h3>
          <p className="text-gray-300 mb-4">Adicione sua primeira tarefa e comece a ganhar XP</p>
          <div className="grid gap-3 max-w-sm mx-auto">
            <div className="text-sm bg-purple-900/20 border border-purple-500/30 rounded-lg p-3">
              <div className="text-purple-300 font-medium mb-1">💡 Dica de Recorrência</div>
              <div>Use tarefas diárias para criar hábitos consistentes!</div>
            </div>
            <div className="text-sm bg-blue-900/20 border border-blue-500/30 rounded-lg p-3">
              <div className="text-blue-300 font-medium mb-1">⚡ Dica de XP</div>
              <div>Tarefas mais desafiadoras oferecem mais XP!</div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}